<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd">

    <job id="helloWorldJob"
         xmlns="http://www.springframework.org/schema/batch">
        <step id="downloadData" next="loadData">
            <tasklet ref="downloadTasklet"/>
        </step>
        <step id="loadData">
            <tasklet>
                <chunk reader="excelReader" processor="stockQuotesProcessor" writer="mysqlItemWriter"
                       commit-interval="200"/>
            </tasklet>

        </step>
    </job>

    <bean id="downloadTasklet" class="org.springframework.batch.core.step.tasklet.MethodInvokingTaskletAdapter">
        <property name="targetObject" ref="dataDownloader"/>
        <property name="targetMethod" value="downloadData"/>
    </bean>

    <bean id="dataDownloader" class="pl.agileit.trader.quotes.fetcher.GpwQuotesDownloader" scope="step">
        <property name="url" value="#{jobParameters['url']}"/>
        <property name="filePath" value="#{jobParameters['xls.file']}"/>
    </bean>

    <bean id="excelReader" class="org.springframework.batch.item.excel.jxl.JxlItemReader" scope="step">
        <property name="resource" value="#{jobParameters['xls.resource']}"/>
        <property name="rowMapper">
            <bean class="org.springframework.batch.item.excel.mapping.PassThroughRowMapper">
            </bean>
        </property>
    </bean>

    <bean id="mysqlItemWriter"
          class="org.springframework.batch.item.database.JdbcBatchItemWriter">
        <property name="dataSource" ref="dataSource"/>
        <property name="sql">
            <value>
                <![CDATA[
            	insert into STOCKDATA(day_id, stock_id, open, max, min, close, turnover)
			values (:day_id, :stock_id, :open, :max, :min, :close, :turnover)
            ]]>
            </value>
        </property>
        <!-- It will take care matching between object property and sql name parameter -->
        <property name="itemSqlParameterSourceProvider">
            <bean
                    class="pl.agileit.trader.quotes.fetcher.QuotesParameterSourceProvider"/>
        </property>
    </bean>

    <bean class="org.springframework.batch.core.scope.StepScope"
          p:proxyTargetClass="true"/>
    <bean id="stockQuotesProcessor" class="pl.agileit.trader.quotes.fetcher.GpwQuotesProcessor">
        <property name="jdbcTemplate" ref="jdbcTemplate"/>
    </bean>


</beans>